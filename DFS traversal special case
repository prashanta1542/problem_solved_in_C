/*-------------------------------------------------------------------------------------------------------
                         This code is reserved by PRASHANTA CHOWDURY
          Note that the above implementation prints only vertices that are reachable from a given 
   vertex. For example, if the edges 0-3 and 0-2 are removed, then the above program would only print 0. 
            To print all vertices of a graph, call DFS for every unvisited vertex.
--------------------------------------------------------------------------------------------------------*/

#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#define MAX_VERTICES 5

struct Graph{
    int V;
    int** adj;
};
struct Graph* createGraph(int V){
    struct Graph* graph =(struct Graph*) malloc (sizeof(struct Graph));
    graph->V=V;
    graph->adj=(int**)malloc(V * sizeof(int*));
    
    for (int i=0;i<V;i++){
        graph->adj[i]=(int*)malloc(V*sizeof(int));
        for(int j=0;j<V;j++){
            graph->adj[i][j]=0;
        }
    }
    return graph;
}
void addEdge(struct Graph* graph,int v, int w){
    graph->adj[v][w]=1;
}
void DFS(struct Graph* graph,int s,bool* visited){
   printf("%d ",s);
   visited[s]=true;
   
   for(int i=0;i<graph->V;i++){
       if(!visited[i] && graph->adj[s][i] == 1){
           DFS(graph,i,visited);
       }
   }
}
int main()
{
    struct Graph* graph=createGraph(5);
    addEdge(graph,1,0);
    addEdge(graph,3,2);
    addEdge(graph,2,1);
    addEdge(graph,1,3);
    addEdge(graph,1,4);
    
    bool visited[MAX_VERTICES];
    for(int i=0;i<graph->V;i++){
        visited[i]=false;
    }
    printf("Following first traversal \n");
    DFS(graph,0,visited);
    for(int i=0;i>graph->V;i++){
        free(graph->adj[i]);
    }
    free(graph->adj);
    free(graph);
    return 0;
}
