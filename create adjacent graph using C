/*----------------------------------------------------------------------------
      This code Reserved by Prashanta Chowdhury
on this section i am write a code to visit an graph with all adjacent
----------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the adjacency list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to add an edge to the graph
void addEdge(struct Node* adjList[], int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = adjList[src];
    adjList[src] = newNode;

    // For an undirected graph, you need to add an edge in both directions
    newNode = createNode(src);
    newNode->next = adjList[dest];
    adjList[dest] = newNode;
}

// Function to print the adjacency list
void printAdjList(struct Node* adjList[], int V) {
    for (int i = 0; i < V; i++) {
        printf("Node %d is connected to: ", i);
        struct Node* temp = adjList[i];
        while (temp) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    int V = 5, E = 7;
    int edges[][2] = {{0, 1}, {0, 4}, {4, 1}, {4, 3}, {1, 3}, {1, 2}, {3, 2}};

    // Create an array of linked lists for the adjacency list
    struct Node* adjList[V];
    for (int i = 0; i < V; i++) {
        adjList[i] = NULL;
    }

    // Add edges to the graph
    for (int i = 0; i < E; i++) {
        addEdge(adjList, edges[i][0], edges[i][1]);
    }

    // Print the adjacency list
    printAdjList(adjList, V);

    return 0;
}
